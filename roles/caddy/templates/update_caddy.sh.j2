#!/usr/bin/env bash

# There are no actual quotes, just jinja2
# shellcheck disable=SC2089
XCADDY_BUILD="/tmp/xcaddy build {{ ['--with'] | product(caddy_modules) | map('join', ' ') | join(' ') }} --output {{ caddy_build_target_directory }}/caddy"

do_update() {
	curl -s https://api.github.com/repos/caddyserver/xcaddy/releases/latest | jq -r '.assets[] | select(.name | contains("linux_amd64.tar.gz")) | .browser_download_url' | wget -q -i - -O - | tar xzf - -C /tmp;

	go_version=$(go version 2> /dev/null | grep -oP "\d+\.\d+\.\d+")
	if command -v go > /dev/null 2>&1 && ! [ "$go_version" = "$(echo -e "1.21\n$go_version" | sort -V | head -n1)" ]; then
		# Go installed in correct version, use directly
		echo "Updating caddy using local go compiler..."
		# There are no actual quotes, just jinja2
		# shellcheck disable=SC2090
		$XCADDY_BUILD 2>&1
	elif command -v podman > /dev/null 2>&1; then
		echo "Updating caddy using podman..."

		podman run --pull=newer -q -v {{ caddy_build_target_directory }}:{{ caddy_build_target_directory }} -v /tmp/xcaddy:/tmp/xcaddy --rm docker.io/golang:latest bash -c "
			apt-get -qq update 2>&1;
			apt-get -qq install curl jq wget tar 2>&1;
			$XCADDY_BUILD 2>&1
		"
	else
		echo "Neither go nor podman installed, failed to install."
		return 1
	fi
}

if [ -f /home/caddy/.local/bin/caddy ]; then
	old_version=$(/home/caddy/.local/bin/caddy version | cut -d' ' -f1) || { echo "Failed to get current caddy version."; exit 1; }
else
	old_version=""
fi

git_releases=$(curl -L https://api.github.com/repos/caddyserver/caddy/releases 2> /dev/null) || { echo "Failed to get releases from Github"; exit 1; }
git_version=$(echo "$git_releases" | jq -r 'first(.[] | select(.prerelease==false)) | .tag_name') || { echo "Failed to get latest version number from releases."; exit 1; }
git_changelog_url=$(echo "$git_releases" | jq -r 'first(.[] | select(.prerelease==false)) | .html_url')

if [[ "$old_version" != "$git_version" || "$1" == "-f" ]]; then
	if ! do_update; then
		echo
		echo "Caddy update failed."
		exit 1
	fi

	echo
	echo "Finished update, restarting caddy..."

	sudo systemctl restart caddy

	echo
	echo "Journal of caddy service after restart:"
	echo "--------------------------------------------"
	journalctl --no-pager -q _SYSTEMD_INVOCATION_ID="$(systemctl show --value -p InvocationID caddy)"
	echo
	echo "--------------------------------------------"
	echo "Updated caddy to '$(/home/caddy/.local/bin/caddy version | cut -d' ' -f1)'. Old version was '$old_version', current git version is '$git_version'."
	echo "--------------------------------------------"
	echo
	echo "You can find the changelog at $git_changelog_url"
	echo
fi